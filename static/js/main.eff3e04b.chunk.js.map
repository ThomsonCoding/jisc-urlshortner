{"version":3,"sources":["Components/UrlResult/UrlResult.js","api/shrtcode.js","Components/SearchBox/SearchBox.js","Components/App/App.js","reportWebVitals.js","index.js"],"names":["console","log","UrlResults","props","copyCodeToClipboard","textArea","select","document","execCommand","setState","copySuccess","state","className","this","longURL","ref","textarea","value","shortURL","onClick","React","Component","axios","create","baseURL","SearchBox","longUrl","shortUrl","updateInput","bind","handleSubmit","event","target","a","shrtcode","get","then","response","data","result","short_link2","ReactDOM","render","getElementById","catch","error","getLink","placeholder","type","onChange","id","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","StrictMode"],"mappings":"2VAIAA,QAAQC,IAAI,Y,IA+BGC,E,kDA3BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAOVC,oBAAsB,WACP,EAAKC,SACbC,SACHC,SAASC,YAAY,QACrB,EAAKC,SAAS,CAACC,aAAa,KAT5B,EAAKC,MAAQ,CACTD,aAAa,GAJF,E,0CAgBnB,WAAU,IAAD,OACL,OACI,sBAAKE,UAAU,aAAf,UACI,qBAAKA,UAAU,UAAf,SAA0BC,KAAKV,MAAMW,UACrC,sBAAKF,UAAU,WAAf,cAA2B,0BAAUG,IAAK,SAACC,GAAD,OAAc,EAAKX,SAAWW,GAAUC,MAAOJ,KAAKV,MAAMe,cACpG,wBAAQN,UAAU,aAAaO,QAAS,kBAAM,EAAKf,uBAAnD,yB,GAvBSgB,IAAMC,W,QCJhBC,E,OAAAA,EAAMC,OAAO,CACxBC,QAAS,8BCkEEC,E,kDAxDX,WAAYtB,GAAO,IAAD,8BACd,cAAMA,IAEDQ,MAAQ,CACXe,QAAU,GACVC,SAAU,IAGZ,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBATN,E,+CAcd,SAAYE,GACZlB,KAAKJ,SAAS,CAACiB,QAAUK,EAAMC,OAAOf,U,0BAItC,WAAe,IAAD,OAeZ,OAdFjB,QAAQC,IAAIY,KAAKF,MAAMe,SACvB1B,QAAQC,IAAI,cACC,uCAAG,sBAAAgC,EAAA,sEACNC,EACHC,IADG,sBACgB,EAAKxB,MAAMe,UAC9BU,MAAK,SAACC,GACL,EAAK5B,SAAS,CAACkB,SAAUU,EAASC,KAAKC,OAAOC,cAC9CC,IAASC,OAAO,cAAC,EAAD,CAAY5B,QAAS,EAAKH,MAAMe,QAASR,SAAU,EAAKP,MAAMgB,WAAapB,SAASoC,eAAe,eACnH3C,QAAQC,IAAI,EAAKU,MAAMgB,aAExBiB,OAAM,SAACC,GACN7C,QAAQ6C,MAAMA,MATN,2CAAH,oDAYJC,K,oBAIb,WACI,OACG,gCACC,sBAAKlC,UAAU,YAAf,UACI,uBAAOmC,YAAY,oBAAoBC,KAAK,MAAMC,SAAUpC,KAAKe,cACjE,wBAAQhB,UAAU,eAAeO,QAASN,KAAKiB,aAA/C,uBAEJ,qBAAKoB,GAAG,sB,GAhDI9B,IAAMC,WCcf8B,E,4JAbb,WACE,OACA,sBAAKvC,UAAU,MAAf,UACE,oBAAIA,UAAU,YAAd,2BACA,4BAAG,mBAAGA,UAAU,YAAb,gHACH,cAAC,EAAD,W,GATYQ,IAAMC,WCKT+B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBlB,MAAK,YAAkD,IAA/CmB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdZ,IAASC,OACP,cAAC,IAAMkB,WAAP,UACE,cAAC,EAAD,MAEFrD,SAASoC,eAAe,SAO1BS,M","file":"static/js/main.eff3e04b.chunk.js","sourcesContent":["import React from 'react';\n\nimport './UrlResult.css';\n\nconsole.log(\"updated1\");\n\nclass UrlResults extends React.Component {\n    \n    constructor(props) {\n        super(props);\n\n        this.state = {\n            copySuccess: false\n        }\n    }\n\n    copyCodeToClipboard = () => {\n        const el = this.textArea\n        el.select()\n        document.execCommand(\"copy\")\n        this.setState({copySuccess: true})\n      }\n    \n    \n    render() {        \n        return (\n            <div className=\"UrlResults\">\n                <div className=\"LongURL\">{this.props.longURL}</div>\n                <div className=\"ShortURL\"> <textarea ref={(textarea) => this.textArea = textarea} value={this.props.shortURL}></textarea></div>\n                <button className=\"copyButton\" onClick={() => this.copyCodeToClipboard()}>COPY</button>\n            </div>\n        )\n    }\n}\n\nexport default UrlResults;","import axios from \"axios\";\n\nexport default axios.create({\n    baseURL: 'https://api.shrtco.de/v2/'\n})\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './SearchBox.css';\n\nimport UrlResults from '../UrlResult/UrlResult';\n\nimport shrtcode from '../../api/shrtcode';\n\n\nclass SearchBox extends React.Component {\n    \n    \n    constructor(props){\n        super(props);\n        \n        this.state = {\n          longUrl : '',\n          shortUrl: ''\n        }\n        \n        this.updateInput = this.updateInput.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n        }\n\n        \n        \n        updateInput(event){\n        this.setState({longUrl : event.target.value}) // This sets the longUrl state to the inputted value. \n      }\n        \n        \n        handleSubmit(){\n        console.log(this.state.longUrl); //To confirm connection, I log longUrl after the button is clicked. \n        console.log(\"Loading...\");\n        const getLink = async () => {\n            await shrtcode\n              .get(`shorten?url=${this.state.longUrl}`)\n              .then((response) => {\n                this.setState({shortUrl: response.data.result.short_link2});\n                ReactDOM.render(<UrlResults longURL={this.state.longUrl} shortURL={this.state.shortUrl}/>, document.getElementById('resultsDiv'));\n                console.log(this.state.shortUrl);\n              })\n              .catch((error) => {\n                console.error(error);\n              });\n          };\n          return getLink();\n        }\n\n\n    render() {\n        return (\n           <div>\n            <div className=\"SearchBox\">\n                <input placeholder=\"Enter your URL...\" type=\"url\" onChange={this.updateInput}/>\n                <button className=\"SearchButton\" onClick={this.handleSubmit}>SEARCH</button>\n            </div>\n            <div id=\"resultsDiv\"></div>  \n        </div> \n        )\n    }\n}\n\n/* \nIn the above render with have a ternary object, this will either return nothing, or update the props named longURL with the input data from the user.\nThis will be added as part of the URL results, which will display the old URL, the new URL and a copy button to allow the user to copy it. \nThis is called within the UrlResults folder within this line: <div className=\"LongURL\">{this.props.longURL}</div>\n*/\nexport default SearchBox;","import React from 'react'; //Import the React Library and save it as react. \n// import ReactDOM from 'react-dom'; //Import the reactDOM library, allowing you to edit the DOM. \nimport './App.css'; //This contains the styling for all the different attributes within the App render method. Classes such as App, AppHeader, IntroText, etc. \n\nimport SearchBox from '../SearchBox/SearchBox'; //This is used to import <SearchBox /> and all of its functionalities. \n// import UrlResults from '../UrlResult/UrlResult'; //This is used to import <UrlResults /> and all of its functionalities. \n\nclass App extends React.Component { \n  //Defining the Class Component, the App class will hold the main structure of the Data, and call upon other classes from different files. (An example would be calling <SearchBox /> from the SearchBox.js file.)\n  //Extends React.Component is also added, it is a JS class.\n\n  render() { //render is used to return the JSX expression, this is used in this case to return the App DIV containing the Header, input boxes, button, results, etc. \n    return (\n    <div className=\"App\">\n      <h1 className=\"AppHeader\">URL Shortener</h1>\n      <i><p className=\"IntroText\">Our tool allows you to seamlessly convert your long URL to a short, quick and user friendly one.</p></i>\n      <SearchBox />\n    </div>\n    )\n  }\n}\n\n//In the above code <SearchBox /> and <UrlResults /> are Component instances, these are used to render the JSX created within their JS files. \n\nexport default App;\n// Exporting the class means I can call this within other react js folders. An example would be <SearchBox /> which has been called within this App.js folder.","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App/App'\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n//comment\nreportWebVitals();\n"],"sourceRoot":""}